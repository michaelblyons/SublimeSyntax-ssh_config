%YAML 1.2
---
# https://www.sublimetext.com/docs/syntax.html
# https://man7.org/linux/man-pages/man5/ssh_config.5.html
# https://man.openbsd.org/ssh_config.5
name: SSH Config
file_extensions:
  - ssh_config
scope: source.ssh_config

variables:
  # https://man7.org/linux/man-pages/man5/ssh_config.5.html#TOKENS
  # https://man.openbsd.org/ssh_config.5#TOKENS
  tokens_standard: (?:%[%CdhikLlnpru])
  tokens_knownhosts: (?:{{tokens_standard}}|%[%fHIKt])
  tokens_hostname: (?:%[%h])
  tokens_proxycommand: (?:%[%hnpr])
  tokens_all: (?:{{tokens_knownhosts}}|%T)
  tokens_localcommand: '{{tokens_all}}'

contexts:
  main:
    - include: comments
    - include: host
    - include: match
    - include: naked-parameters

  parameters:
    - include: comments
    - include: parameter-hostname
    - include: parameter-localcommand
    - include: parameter-proxycommand
    - include: parameter-proxyjump
    - include: parameter-knownhostscommand
    - include: parameter-with-boolean-values
    - include: parameter-with-boolean-values-plus
    - include: parameter-generic

  tokens-standard:
    - match: '{{tokens_standard}}'
      scope: constant.character.escape.ssh_config

  pop-before-match-parameter:
    - include: SSH Common.sublime-syntax#pop-before-nl
    - match: (?=[ \t]*(?i:all|canonical|exec|host|originalhost|user|localuser)\b)
      pop: true

  pop-before-next-host:
    - match: (?=^[ \t]*(?i:host|match)\b)
      pop: true

  pop-nl-as-value:
    - match: \n
      scope: meta.mapping.value.ssh_config
      pop: true

  naked-parameters:
    - match: (?=\S)
      push:
        - meta_scope: meta.block.naked.ssh_config
        - include: pop-before-next-host
        - include: parameters

  operator-exclamation:
    - match: '!'
      scope: keyword.operator.logical.ssh_config

  punctuation-comma-sequence:
    - match: ','
      scope: punctuation.separator.sequence.ssh_config

  environment-variables:
    # https://man7.org/linux/man-pages/man5/ssh_config.5.html#ENVIRONMENT_VARIABLES
    - include: scope:source.shell#expansions-parameter

  # Host
  host:
    - match: ^[ \t]*((?i:Host))\b
      captures:
        1: meta.block.host.ssh_config keyword.declaration.host-alias.ssh_config
      set: host-aliases

  host-aliases:
    - meta_scope: meta.block.host.ssh_config
    - match: (?=\n)
      set: host-body
    - include: host-patterns

  host-body:
    - meta_scope: meta.block.host.ssh_config
    - include: pop-before-next-host
    - include: parameters

  # Match
  match:
    - match: ^[ \t]*((?i:Match))\b
      captures:
        1: meta.block.match.ssh_config keyword.control.conditional.ssh_config
      set: match-conditions

  match-conditions:
    - meta_content_scope: meta.block.match.ssh_config
                          meta.statement.conditional.ssh_config
    - match: \n
      set: match-body

    - include: operator-exclamation
    - match: \b(?i:All)\b
      scope: constant.language.boolean.ssh_config
    - match: \b(?i:Canonical|Final)\b
      scope: keyword.other.ssh_config

    - match: \b((?i:Exec))\b[ \t]*(\")
      captures:
        1: keyword.other.ssh_config
        2: string.quoted.double.ssh_config punctuation.definition.string.begin.ssh_config
      escape: (?<!\\)\"(?=\s*(?:#.*)?)
      escape_captures:
        0: string.quoted.double.ssh_config punctuation.definition.string.end.ssh_config
      embed: scope:source.shell
    - match: \b((?i:Exec))\b[ \t]+
      captures:
        1: keyword.other.ssh_config
      with_prototype:
        - include: tokens-standard
        - include: pop-before-match-parameter
      push:
        - meta_content_scope: source.embedded.shell
        - include: scope:source.shell

    - match: \b(?i:(?:Original)?Host)\b
      scope: keyword.other.ssh_config
      push:
        - include: pop-before-match-parameter
        - include: punctuation-comma-sequence
        - include: host-patterns

    - match: \b(?i:(?:Local)?User)\b
      scope: keyword.other.ssh_config
      push:
        - include: pop-before-match-parameter
        - match: \S
          scope: string.unquoted.ssh_config

  match-body:
    - meta_scope: meta.block.match.ssh_config
    - include: pop-before-next-host
    - include: parameters

  # Parameters
  parameter-hostname:
    - match: ^[ \t]*((?i:HostName))\b[ \t]*(=)?
      captures:
        1: meta.mapping.key.ssh_config keyword.declaration.host.ssh_config
        2: keyword.operator.assignment.ssh_config
      push:
        - meta_content_scope: meta.string.host.ssh_config
        - include: SSH Common.sublime-syntax#pop-nl
        - include: SSH Common.sublime-syntax#ip-addresses
        - match: (?=\S+)
          push:
            - meta_content_scope: string.unquoted.hostname.ssh_config
            - include: SSH Common.sublime-syntax#pop-before-nl
            - match: '{{tokens_hostname}}'
              scope: constant.character.escape.ssh_config
            - match: '[ \t]+(\S+)'
              captures:
                1: invalid.illegal.ssh_config

  host-patterns:
    # https://man7.org/linux/man-pages/man5/ssh_config.5.html#PATTERNS
    # https://man.openbsd.org/ssh_config.5#PATTERNS
    - include: operator-exclamation
    - match: '[^\s*?,]+'
      scope: entity.name.label.host-alias.ssh_config
    - match: \*|\?
      scope: entity.name.label.host-alias.ssh_config keyword.operator.wildcard.ssh_config

  parameter-proxyjump:
    # TODO: Double-quoted version
    - match: ^\s*((?i:ProxyJump))\b[ \t]*(=)?
      captures:
        1: meta.mapping.key.ssh_config keyword.other.ssh_config
        2: keyword.operator.assignment.ssh_config
      push:
        - meta_content_scope: meta.mapping.value.ssh_config
        - include: pop-nl-as-value
        - include: SSH Common.sublime-syntax#ip-addresses
        - include: punctuation-comma-sequence

        # user
        - match: (?=[\w%]+@)
          push:
            - meta_content_scope: meta.string.user.ssh_config string.unquoted.ssh_config
            - match: '{{tokens_proxycommand}}'
              scope: constant.character.escape.ssh_config
            - match: '@'
              scope: punctuation.separator.ssh_config
              pop: true

        # port
        - match: ':(?=\d{1,5}\b)'
          scope: punctuation.separator.ssh_config
          push:
            - match: (?=\D)
              pop: true
            - include: SSH Common.sublime-syntax#port-numbers

        # host or host nickname
        - match: \bNone\b
          scope: constant.language.null.ssh_config
        - match: (?=\S+)
          push:
            - meta_content_scope: string.unquoted.hostname.ssh_config
            - match: (?=[\s,:"])
              pop: true
            - match: '{{tokens_proxycommand}}'
              scope: constant.character.escape.ssh_config

  parameter-proxycommand:
    - match: ^\s*((?i:ProxyCommand))\b[ \t]*(=)?
      captures:
        1: meta.mapping.key.ssh_config keyword.other.ssh_config
        2: keyword.operator.assignment.ssh_config
      with_prototype:
        - match: '{{tokens_proxycommand}}'
          scope: constant.character.escape.ssh_config
      push:
        - meta_content_scope: meta.mapping.value.ssh_config
                              source.embedded.shell
        - match: none
          scope: constant.language.set.ssh_config
          pop: true
        - include: scope:source.shell
        - include: pop-nl-as-value

  parameter-localcommand:
    - match: ^\s*((?i:LocalCommand))\b[ \t]*(=)?
      captures:
        1: meta.mapping.key.ssh_config keyword.other.ssh_config
        2: keyword.operator.assignment.ssh_config
      with_prototype:
        - match: '{{tokens_localcommand}}'
          scope: constant.character.escape.ssh_config
      push:
        - meta_content_scope: meta.mapping.value.ssh_config
                              source.embedded.shell
        - match: none
          scope: constant.language.set.ssh_config
          pop: true
        - include: scope:source.shell
        - include: pop-nl-as-value

  parameter-knownhostscommand:
    - match: ^\s*((?i:KnownHostsCommand))\b[ \t]*(=)?
      captures:
        1: meta.mapping.key.ssh_config keyword.other.ssh_config
        2: keyword.operator.assignment.ssh_config
      with_prototype:
        - match: '{{tokens_knownhosts}}'
          scope: constant.character.escape.ssh_config
      push:
        - meta_content_scope: meta.mapping.value.ssh_config
                              source.embedded.shell
        - match: none
          scope: constant.language.set.ssh_config
          pop: true
        - include: scope:source.shell
        - include: pop-nl-as-value

  boolean-value:
    - match: \b(?i:yes|no)\b
      scope: constant.language.boolean.ssh_config

  boolean-value-with-typing:
    - include: boolean-value
      # Match while typing as well
    - match: \b(?i:y(?:es?)?|no?)\b

  parameter-with-boolean-values:
    - match: |-
        (?x:
          ^\s*((?i:
            (?:Pubkey|HostBased|Password|ChallengeResponse|
             KbdInteractive|(?:Rhosts)?RSA)
              Authentication| # Auth
            ForwardAgent|ForwardX11(?:Trusted)?|ClearAllForwardings|
              ExitOnForwardFailure| # Fwds
            BatchMode|CanonicalizeFallbackLocal|CheckHostIP|Compression|
            EnableSSHKeySign|GatewayPorts|HashKnownHosts|IdentitiesOnly|
            NoHostAuthenticationForLocalhost|PermitLocalCommand|ProxyUseFdpass|
            StreamLocalBindUnlink|TCPKeepAlive|UseKeychain|UsePrivilegedPort|
            VisualHostKey|
            GSSAPI(?:Authentication|KeyExchange|DelegateCredentials|
                   RenewalForcesRekey|TrustDNS) # GSSAPI
          ))\b[ \t]*(=)?
        )
      captures:
        1: meta.mapping.key.ssh_config keyword.other.ssh_config
        2: keyword.operator.assignment.ssh_config
      push:
        - meta_content_scope: meta.mapping.value.ssh_config
        - include: pop-nl-as-value
        - match: '[ \t]+\S+'
          scope: invalid.illegal.ssh_config
        - include: boolean-value-with-typing
        - match: \S+
          scope: invalid.illegal.ssh_config

  parameter-with-boolean-values-plus:
    # ask
    - match: ^\s*((?i:StrictHostKeyChecking|VerifyHostKeyDNS))\b[ \t]*(=)?
      captures:
        1: meta.mapping.key.ssh_config keyword.other.ssh_config
        2: keyword.operator.assignment.ssh_config
      push:
        - meta_content_scope: meta.mapping.value.ssh_config
        - include: pop-nl-as-value
        - match: '[ \t]+\S+'
          scope: invalid.illegal.ssh_config
        - include: boolean-value-with-typing
        - match: \b(?i:ask)\b
          scope: constant.language.set.ssh_config
        - match: \b(?i:a(?:s?k)?)\b
        - match: \S+
          scope: invalid.illegal.ssh_config

  parameter-generic:
    # the `1` is for "X11"
    - match: ^\s*([a-zA-Z1]+)\b[ \t]*(=)?
      captures:
        1: meta.mapping.key.ssh_config keyword.other.ssh_config
        2: keyword.operator.assignment.ssh_config
      push:
        - meta_content_scope: meta.mapping.value.ssh_config
        - include: boolean-value
        - include: tokens-standard
        - match: \b\d+(?=[\s,"])
          scope: constant.numeric.ssh_config
        - match: \"
          scope: punctuation.definition.string.begin.ssh_config
          push:
            - meta_scope: string.quoted.double.ssh_config
            - match: \"
              scope: punctuation.definition.string.end.ssh_config
              pop: true
            - match: \n|$
              scope: invalid.illegal.ssh_config
              pop: true
            - include: generic-parameter-values
        - match: \S
          scope: string.unquoted.ssh_config
          push:
            - meta_content_scope: string.unquoted.ssh_config
            - include: SSH Common.sublime-syntax#pop-before-nl
            - include: generic-parameter-values
        - include: pop-nl-as-value

  generic-parameter-values:
    - include: tokens-standard
    - match: \*|\?
      scope: keyword.operator.wildcard.ssh_config
    - include: operator-exclamation
    - include: punctuation-comma-sequence
    - include: SSH Crypto.sublime-syntax#ssh-key-types
    - include: SSH Crypto.sublime-syntax#ssh-ciphers
    - include: SSH Crypto.sublime-syntax#ssh-kex-algorithms
    - include: SSH Crypto.sublime-syntax#ssh-mac-algorithms
    - include: SSH Common.sublime-syntax#ipv6-square-bracket
    - include: SSH Common.sublime-syntax#ip-addresses-with-cidr
    - include: SSH Common.sublime-syntax#time-values
    - include: SSH Common.sublime-syntax#bytes-values

  comments:
    - include: SSH Common.sublime-syntax#comments-number-sign
    - include: SSH Common.sublime-syntax#comments-semicolon
